{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags;\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\") + (regexp.global ? \"g\" : \"\") + (regexp.multiline ? \"m\" : \"\");\n  }\n\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp),\n        target = current;\n\n    for (var i = 0; i < flags.length; i++) {\n      if (target.indexOf(flags.charAt(i)) == -1) target += flags.charAt(i);\n    }\n\n    return current == target ? regexp : new RegExp(regexp.source, target);\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source);\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\");\n\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch;\n      var string = doc.getLine(line),\n          match = regexp.exec(string);\n      if (match) return {\n        from: Pos(line, match.index),\n        to: Pos(line, match.index + match[0].length),\n        match: match\n      };\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start);\n    regexp = ensureFlags(regexp, \"gm\");\n    var string,\n        chunk = 1;\n\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break;\n        var curLine = doc.getLine(line++);\n        string = string == null ? curLine : string + \"\\n\" + curLine;\n      }\n\n      chunk = chunk * 2;\n      regexp.lastIndex = start.ch;\n      var match = regexp.exec(string);\n\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"),\n            inside = match[0].split(\"\\n\");\n        var startLine = start.line + before.length - 1,\n            startCh = before[before.length - 1].length;\n        return {\n          from: Pos(startLine, startCh),\n          to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n          match: match\n        };\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp) {\n    var cutOff = 0,\n        match;\n\n    for (;;) {\n      regexp.lastIndex = cutOff;\n      var newMatch = regexp.exec(string);\n      if (!newMatch) return match;\n      match = newMatch;\n      cutOff = match.index + (match[0].length || 1);\n      if (cutOff == string.length) return match;\n    }\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\");\n\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line);\n      if (ch > -1) string = string.slice(0, ch);\n      var match = lastMatchIn(string, regexp);\n      if (match) return {\n        from: Pos(line, match.index),\n        to: Pos(line, match.index + match[0].length),\n        match: match\n      };\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"gm\");\n    var string,\n        chunk = 1;\n\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line--);\n        string = string == null ? curLine.slice(0, start.ch) : curLine + \"\\n\" + string;\n      }\n\n      chunk *= 2;\n      var match = lastMatchIn(string, regexp);\n\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"),\n            inside = match[0].split(\"\\n\");\n        var startLine = line + before.length,\n            startCh = before[before.length - 1].length;\n        return {\n          from: Pos(startLine, startCh),\n          to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n          match: match\n        };\n      }\n    }\n  }\n\n  var doFold, noFold;\n\n  if (String.prototype.normalize) {\n    doFold = function doFold(str) {\n      return str.normalize(\"NFD\").toLowerCase();\n    };\n\n    noFold = function noFold(str) {\n      return str.normalize(\"NFD\");\n    };\n  } else {\n    doFold = function doFold(str) {\n      return str.toLowerCase();\n    };\n\n    noFold = function noFold(str) {\n      return str;\n    };\n  } // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n\n\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos;\n\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min;\n      var mid = min + max >> 1;\n      var len = foldFunc(orig.slice(0, mid)).length;\n      if (len == pos) return mid;else if (len > pos) max = mid;else min = mid + 1;\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null;\n    var fold = caseFold ? doFold : noFold;\n    var lines = fold(query).split(/\\r|\\n\\r?/);\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch),\n          string = fold(orig);\n\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0]);\n        if (found == -1) continue search;\n        var start = adjustPos(orig, string, found, fold) + ch;\n        return {\n          from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n          to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)\n        };\n      } else {\n        var cutFrom = string.length - lines[0].length;\n        if (string.slice(cutFrom) != lines[0]) continue search;\n\n        for (var i = 1; i < lines.length - 1; i++) {\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search;\n        }\n\n        var end = doc.getLine(line + lines.length - 1),\n            endString = fold(end),\n            lastLine = lines[lines.length - 1];\n        if (endString.slice(0, lastLine.length) != lastLine) continue search;\n        return {\n          from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n          to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))\n        };\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null;\n    var fold = caseFold ? doFold : noFold;\n    var lines = fold(query).split(/\\r|\\n\\r?/);\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line);\n      if (ch > -1) orig = orig.slice(0, ch);\n      var string = fold(orig);\n\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0]);\n        if (found == -1) continue search;\n        return {\n          from: Pos(line, adjustPos(orig, string, found, fold)),\n          to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))\n        };\n      } else {\n        var lastLine = lines[lines.length - 1];\n        if (string.slice(0, lastLine.length) != lastLine) continue search;\n\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++) {\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search;\n        }\n\n        var top = doc.getLine(line + 1 - lines.length),\n            topString = fold(top);\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search;\n        return {\n          from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n          to: Pos(line, adjustPos(orig, string, lastLine.length, fold))\n        };\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false;\n    this.doc = doc;\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {\n      from: pos,\n      to: pos\n    };\n    var caseFold;\n\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold;\n    } else {\n      // Backwards compat for when caseFold was the 4th argument\n      caseFold = options;\n      options = null;\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false;\n\n      this.matches = function (reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold);\n      };\n    } else {\n      query = ensureFlags(query, \"gm\");\n      if (!options || options.multiline !== false) this.matches = function (reverse, pos) {\n        return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos);\n      };else this.matches = function (reverse, pos) {\n        return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos);\n      };\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function findNext() {\n      return this.find(false);\n    },\n    findPrevious: function findPrevious() {\n      return this.find(true);\n    },\n    find: function find(reverse) {\n      var result = this.matches(reverse, this.doc.clipPos(reverse ? this.pos.from : this.pos.to)); // Implements weird auto-growing behavior on null-matches for\n      // backwards-compatiblity with the vim code (unfortunately)\n\n      while (result && CodeMirror.cmpPos(result.from, result.to) == 0) {\n        if (reverse) {\n          if (result.from.ch) result.from = Pos(result.from.line, result.from.ch - 1);else if (result.from.line == this.doc.firstLine()) result = null;else result = this.matches(reverse, this.doc.clipPos(Pos(result.from.line - 1)));\n        } else {\n          if (result.to.ch < this.doc.getLine(result.to.line).length) result.to = Pos(result.to.line, result.to.ch + 1);else if (result.to.line == this.doc.lastLine()) result = null;else result = this.matches(reverse, Pos(result.to.line + 1, 0));\n        }\n      }\n\n      if (result) {\n        this.pos = result;\n        this.atOccurrence = true;\n        return this.pos.match || true;\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0);\n        this.pos = {\n          from: end,\n          to: end\n        };\n        return this.atOccurrence = false;\n      }\n    },\n    from: function from() {\n      if (this.atOccurrence) return this.pos.from;\n    },\n    to: function to() {\n      if (this.atOccurrence) return this.pos.to;\n    },\n    replace: function replace(newText, origin) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1, lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n  CodeMirror.defineExtension(\"getSearchCursor\", function (query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function (query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n  CodeMirror.defineExtension(\"selectMatches\", function (query, caseFold) {\n    var ranges = [];\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({\n        anchor: cur.from(),\n        head: cur.to()\n      });\n    }\n\n    if (ranges.length) this.setSelections(ranges, 0);\n  });\n});","map":{"version":3,"sources":["/Users/shayaansaiyed/Documents/Projects/notes-manager/node_modules/codemirror/addon/search/searchcursor.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","Pos","regexpFlags","regexp","flags","ignoreCase","global","multiline","ensureFlags","current","target","i","length","indexOf","charAt","RegExp","source","maybeMultiline","test","searchRegexpForward","doc","start","line","ch","last","lastLine","lastIndex","string","getLine","match","exec","from","index","to","searchRegexpForwardMultiline","chunk","curLine","before","slice","split","inside","startLine","startCh","lastMatchIn","cutOff","newMatch","searchRegexpBackward","first","firstLine","searchRegexpBackwardMultiline","doFold","noFold","String","prototype","normalize","str","toLowerCase","adjustPos","orig","folded","pos","foldFunc","min","max","Math","mid","len","searchStringForward","query","caseFold","fold","lines","search","found","cutFrom","end","endString","searchStringBackward","lastIndexOf","top","topString","SearchCursor","options","atOccurrence","clipPos","matches","reverse","findNext","find","findPrevious","result","cmpPos","replace","newText","origin","splitLines","replaceRange","defineExtension","defineDocExtension","ranges","cur","getSearchCursor","getCursor","push","anchor","head","setSelections"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp), target = current\n    for (var i = 0; i < flags.length; i++) if (target.indexOf(flags.charAt(i)) == -1)\n      target += flags.charAt(i)\n    return current == target ? regexp : new RegExp(regexp.source, target)\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp) {\n    var cutOff = 0, match\n    for (;;) {\n      regexp.lastIndex = cutOff\n      var newMatch = regexp.exec(string)\n      if (!newMatch) return match\n      match = newMatch\n      cutOff = match.index + (match[0].length || 1)\n      if (cutOff == string.length) return match\n    }\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      if (ch > -1) string = string.slice(0, ch)\n      var match = lastMatchIn(string, regexp)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine.slice(0, start.ch) : curLine + \"\\n\" + string\n      }\n      chunk *= 2\n\n      var match = lastMatchIn(string, regexp)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (endString.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureFlags(query, \"gm\")\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var result = this.matches(reverse, this.doc.clipPos(reverse ? this.pos.from : this.pos.to))\n\n      // Implements weird auto-growing behavior on null-matches for\n      // backwards-compatiblity with the vim code (unfortunately)\n      while (result && CodeMirror.cmpPos(result.from, result.to) == 0) {\n        if (reverse) {\n          if (result.from.ch) result.from = Pos(result.from.line, result.from.ch - 1)\n          else if (result.from.line == this.doc.firstLine()) result = null\n          else result = this.matches(reverse, this.doc.clipPos(Pos(result.from.line - 1)))\n        } else {\n          if (result.to.ch < this.doc.getLine(result.to.line).length) result.to = Pos(result.to.line, result.to.ch + 1)\n          else if (result.to.line == this.doc.lastLine()) result = null\n          else result = this.matches(reverse, Pos(result.to.line + 1, 0))\n        }\n      }\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n"]},"metadata":{},"sourceType":"script"}