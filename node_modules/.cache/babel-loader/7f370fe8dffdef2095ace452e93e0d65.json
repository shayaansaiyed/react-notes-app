{"ast":null,"code":"var _jsxFileName = \"/Users/shayaansaiyed/Documents/Projects/notes-manager/notes-manager/src/App.js\";\nimport React, { Component } from 'react';\nimport Sidebar from './components/Sidebar.js';\nimport Editor from './components/Editor.js';\nimport 'milligram';\nconst NoteIDContext = React.createContext();\n\nclass App extends Component {\n  constructor() {\n    super();\n    localStorage.clear();\n    this.state = {\n      editorText: \"\",\n      currentNoteID: 0\n    }; //initialize localStorage for first Note\n\n    localStorage.setItem(this.state.currentNoteID, this.state.editorText);\n    this.handleChange = this.handleChange.bind(this);\n    this.addNewNote = this.addNewNote.bind(this);\n  } // handleSaveClick(event){\n  //   console.log(\"Savings Note ID: \" + this.state.currentNoteID);\n  //   event.preventDefault();\n  //   localStorage.setItem(this.state.currentNoteID, this.state.editorText);\n  // }\n\n\n  handleChange(value) {\n    this.setState({\n      editorText: value\n    });\n    localStorage.setItem(this.state.currentNoteID, this.state.editorText);\n  }\n\n  addNewNote() {\n    this.setState({\n      currentNoteID: this.state.currentNoteID + 1,\n      editorText: \" \"\n    });\n    console.log(\"Add New Note: Note ID: \" + this.state.currentNoteID);\n    localStorage.setItem(this.state.currentNoteID, this.state.editorText);\n  }\n\n  handleNoteSelection() {\n    alert(\"handling note selection with ID \");\n  }\n\n  render() {\n    let notes = [];\n    let i = 0;\n\n    for (i = 0; i < localStorage.length; i++) {\n      if (localStorage[i] === \"\") {\n        notes.push(React.createElement(\"div\", {\n          className: \"row row-100\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, \"New Note\"));\n      } else {\n        notes.push(React.createElement(\"button\", {\n          className: \" row row-100\",\n          onClick: this.props.onClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, localStorage[this.props.ID]));\n      }\n    }\n\n    const notesList = React.createElement(\"div\", {\n      className: \"row row-100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column column-100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, notes));\n    return React.createElement(\"div\", {\n      class: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      class: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \" notes app \")), React.createElement(\"div\", {\n      class: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      onNewNoteClick: this.addNewNote,\n      onClick: this.handleNoteSelection,\n      notesList: notesList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(Editor, {\n      handleChange: this.handleChange // handleSaveClick = {this.handleSaveClick}\n      ,\n      text: this.state.editorText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/shayaansaiyed/Documents/Projects/notes-manager/notes-manager/src/App.js"],"names":["React","Component","Sidebar","Editor","NoteIDContext","createContext","App","constructor","localStorage","clear","state","editorText","currentNoteID","setItem","handleChange","bind","addNewNote","value","setState","console","log","handleNoteSelection","alert","render","notes","i","length","push","props","onClick","ID","notesList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Sidebar from './components/Sidebar.js'\nimport Editor from './components/Editor.js'\nimport 'milligram'\n\nconst NoteIDContext = React.createContext()\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    localStorage.clear()\n\n    this.state = {\n      editorText: \"\",\n      currentNoteID: 0\n    }\n\n    //initialize localStorage for first Note\n    localStorage.setItem(this.state.currentNoteID, this.state.editorText);\n\n    this.handleChange=this.handleChange.bind(this);\n    this.addNewNote=this.addNewNote.bind(this);\n  }\n\n  // handleSaveClick(event){\n  //   console.log(\"Savings Note ID: \" + this.state.currentNoteID);\n  //   event.preventDefault();\n  //   localStorage.setItem(this.state.currentNoteID, this.state.editorText);\n  // }\n\n  handleChange(value){\n    this.setState({\n      editorText: value\n    })\n    localStorage.setItem(this.state.currentNoteID, this.state.editorText);\n  }\n\n  addNewNote(){\n    this.setState({\n      currentNoteID: this.state.currentNoteID+1,\n      editorText: \" \"\n    })\n    console.log(\"Add New Note: Note ID: \" + this.state.currentNoteID);\n    localStorage.setItem(this.state.currentNoteID, this.state.editorText);\n  }\n\n  handleNoteSelection(){\n    alert(\"handling note selection with ID \" );\n  }\n\n  render(){\n    let notes = [];\n    let i = 0;\n    for (i = 0; i < localStorage.length; i++){\n      if(localStorage[i] === \"\"){\n        notes.push(<div className=\"row row-100\">New Note</div>)\n      } else {\n        notes.push(<button className=\" row row-100\" onClick={this.props.onClick}>\n          {localStorage[this.props.ID]}\n        </button>)\n      }\n    }\n    const notesList = (\n      <div className=\"row row-100\">\n        <div className=\"column column-100\">\n          {notes}\n        </div>\n      </div>\n    )\n\n    return(\n      <div class=\"App\">\n        <div class=\"row\">\n          <h1 class=\"column\"> notes app </h1>\n        </div>\n        <div class=\"row\">\n          <Sidebar\n            onNewNoteClick = {this.addNewNote}\n            onClick = {this.handleNoteSelection}\n            notesList = {notesList}\n          />\n          <Editor\n            handleChange = {this.handleChange}\n            // handleSaveClick = {this.handleSaveClick}\n            text={this.state.editorText}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}