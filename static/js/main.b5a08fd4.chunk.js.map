{"version":3,"sources":["components/NoteList.js","components/NotePreview.js","components/Sidebar.js","components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["liStyle","Component","listStyleType","buttonStyle","paddingLeft","marginLeft","width","marginRight","newNoteStyle","background","color","NoteList","props","handleClick","bind","createNoteList","noteID","this","handleNoteClick","notes","i","id","localStorage","push","style","key","toString","className","onClick","length","Sidebar","class","onNewNoteClick","Editor","value","text","options","autofocus","onChange","handleChange","App","clear","state","editorText","currentNoteID","setItem","addNewNote","handleNoteSelection","setState","console","log","getItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5a08fd4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport NotePreview from './NotePreview.js';\n\nconst liStyle = {\n  listStyleType: 'none'\n};\n\nconst buttonStyle = {\n  paddingLeft: '10px',\n  marginLeft: '5px',\n  width: '100%',\n  marginRight: '5px'\n}\n\nconst newNoteStyle = {\n  paddingLeft: '10px',\n  marginLeft: '5px',\n  width: '100%',\n  marginRight: '5px',\n  background: 'none',\n  color: '#9b4dca'\n}\n\n\nclass NoteList extends Component {\n  constructor(props){\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n    this.createNoteList = this.createNoteList.bind(this);\n  }\n\n  handleClick(noteID){\n    this.props.handleNoteClick(noteID);\n  }\n\n  createNoteList(){\n    let notes = [];\n    let i = 0;\n    for (i = 0; i < localStorage.length; i++){\n      const id = i;\n      if(localStorage[i] === \"\"){\n        notes.push(<li style={liStyle} key={i.toString()}><button style={newNoteStyle} className=\"row\" onClick={()=>{this.handleClick(id)}}>\n                    New Note\n                   </button></li>)\n      } else {\n        notes.push(<li style={liStyle} key={i.toString()}><button style={buttonStyle} className=\"row\" onClick={()=>{this.handleClick(id)}}>\n          {localStorage[i]}\n        </button></li>)\n      }\n    }\n    return notes;\n  }\n\n  render(){\n    return <ul>{this.createNoteList()}</ul>\n  }\n}\n\nexport default NoteList;\n","import React, { Component } from 'react';\n\nclass NotePreview extends Component {\n\n  render(){\n    console.log(\"Rendering preview: \" + localStorage[this.props.ID])\n    return(\n      <button className=\" row row-100\" onClick={this.props.onClick}>\n        {localStorage[this.props.ID]}\n      </button>\n    )\n  }\n}\n\nexport default NotePreview;\n","import React, { Component } from 'react';\nimport NoteList from './NoteList.js'\n\nclass Sidebar extends Component {\n  constructor(props){\n    super(props);\n\n  this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(id){\n    this.props.onClick(id);\n  }\n\n  render(){\n    return(\n      <div class=\"Sidebar column column-25\">\n        <button className=\"button button-clear\" onClick={this.props.onNewNoteClick}>+ new note</button>\n        <NoteList handleNoteClick={this.handleClick}/>\n      </div>\n    )\n  }\n}\n\nexport default Sidebar;\n","import React, { Component } from 'react';\nimport SimpleMDE from \"react-simplemde-editor\"\n\nclass Editor extends Component {\n  constructor(){\n    super();\n  }\n\n  render(){\n    return(\n      <div class=\"Editor column column-s75\">\n          <SimpleMDE\n            value={this.props.text}\n            options={{\n              autofocus: true\n            }}\n            onChange={this.props.handleChange}\n          />\n      </div>\n    )\n  }\n}\n\nexport default Editor;\n","import React, { Component } from 'react';\nimport Sidebar from './components/Sidebar.js'\nimport Editor from './components/Editor.js'\nimport 'milligram'\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    localStorage.clear()\n\n    this.state = {\n      editorText: \"\",\n      currentNoteID: 0\n    }\n\n    //initialize localStorage for first Note\n    localStorage.setItem(this.state.currentNoteID, this.state.editorText);\n\n    this.handleChange=this.handleChange.bind(this);\n    this.addNewNote=this.addNewNote.bind(this);\n    this.handleNoteSelection=this.handleNoteSelection.bind(this);\n  }\n\n\n  handleChange(value){\n    this.setState({\n      editorText: value\n    })\n    localStorage.setItem(this.state.currentNoteID, this.state.editorText);\n  }\n\n  addNewNote(){\n    this.setState({\n      currentNoteID: localStorage.length,\n      editorText: \" \"\n    })\n    console.log(\"Add New Note: Note ID: \" + this.state.currentNoteID);\n    localStorage.setItem(this.state.currentNoteID, this.state.editorText);\n  }\n\n  handleNoteSelection(noteID){\n    this.setState({\n      currentNoteID: noteID,\n      editorText: localStorage.getItem(noteID)\n    })\n  }\n\n  render(){\n\n    return(\n      <div class=\"App\">\n        <div class=\"row\">\n          <h1 class=\"column\"> notes app </h1>\n        </div>\n        <div class=\"row\">\n          <Sidebar\n            onNewNoteClick = {this.addNewNote}\n            onClick = {this.handleNoteSelection}\n          />\n          <Editor\n            handleChange = {this.handleChange}\n            text={this.state.editorText}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}